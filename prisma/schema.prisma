generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(USER)
  Authenticator Authenticator[]
  newsLetter    Boolean?        @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cart          Cart?
  Orders        Order[]
  likedProducts LikedProduct[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Registrationtoken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  expiryDate DateTime? @db.Date
  token      String    @unique
  used       Boolean
  userId     String?   @db.ObjectId
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  v            Int?           @map("__v")
  amount       Int            @default(0)
  category     String
  description  String
  images       String[]
  name         String
  price        Int            @default(0)
  cartProducts CartProduct[]
  liked        LikedProduct[]
}

model CartProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  productId String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model Cart {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @unique @db.ObjectId
  user         User?         @relation(fields: [userId], references: [id])
  cartProducts CartProduct[]
  Order        Order[]
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  cartId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  cart         Cart     @relation(fields: [cartId], references: [id])
  totalPrice   String
  status       String
  orderDate    DateTime
  deliveryDate DateTime
  customerName String
  address      String
  city         String
  zip          String
  phone        String

  @@unique([userId, cartId])
}

model LikedProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
